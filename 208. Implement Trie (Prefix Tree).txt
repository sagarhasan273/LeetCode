Approch 01:

class Trie {
public:
    Trie() {
    }
    unordered_map<string, int> map;
    unordered_map<string, int> result;
    
    void insert(string word) {
        string s = "";
        for (int i = 0; i<word.size(); i++){
            s += word[i];
            map[s] = 1;
        }
        result[word] = 1;
    }
    
    bool search(string word) {
        return result[word];
    }
    
    bool startsWith(string prefix) {
        return map[prefix];
    }
};

Python 3:

class Trie:
    def __init__(self):
        self.result = {}
        self.hmap = {}

    def insert(self, word: str) -> None:
        s = ""
        for w in word:
            s += w
            self.hmap[s] = 1
        self.result[word] = 1
            

    def search(self, word: str) -> bool:
        return word in self.result

    def startsWith(self, prefix: str) -> bool:
        
        return prefix in self.hmap


C++ Tree Solution:

class TrieNode {
private:
    TrieNode* child[26];
    bool flag = false;
    
public:
    bool containsKey(char ch){
        return child[ch-'a'] == NULL;
    }
    
    void putTreeNode(char ch, TrieNode* node){
        child[ch-'a'] = node;
    }
    
    TrieNode* getTreeNode(char ch){
        return child[ch-'a'];
    }
    
    void setEndTreeNode(){
        flag = true;
    }
    
    bool isEndTreeNode() {
        return flag;
    }
};

class Trie {
private:
    TrieNode* root;
    
public:
    Trie() {
        root = new TrieNode();
    }

    void insert(string word) {
        TrieNode* curr = root;
        
        for (auto w: word){
            if (curr->containsKey(w)){
                curr->putTreeNode(w, new TrieNode());
            }
            curr = curr->getTreeNode(w);
        }
        curr->setEndTreeNode();
    }
    
    bool search(string word) {
        TrieNode* curr = root;
        
        for(auto w: word){
            if (curr->containsKey(w)) return false;
            curr = curr->getTreeNode(w);
        }
        
        return curr->isEndTreeNode();
    }
    
    bool startsWith(string prefix) {
        TrieNode* curr = root;
        
        for(auto w: prefix){
            if (curr->containsKey(w)) return false;
            curr = curr->getTreeNode(w);
        }
        
        return true;
    }
};