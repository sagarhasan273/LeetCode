Approch 01:

class Trie {
public:
    Trie() {
    }
    unordered_map<string, int> map;
    unordered_map<string, int> result;
    
    void insert(string word) {
        string s = "";
        for (int i = 0; i<word.size(); i++){
            s += word[i];
            map[s] = 1;
        }
        result[word] = 1;
    }
    
    bool search(string word) {
        return result[word];
    }
    
    bool startsWith(string prefix) {
        return map[prefix];
    }
};

Python 3:

class Trie:
    def __init__(self):
        self.result = {}
        self.hmap = {}

    def insert(self, word: str) -> None:
        s = ""
        for w in word:
            s += w
            self.hmap[s] = 1
        self.result[word] = 1
            

    def search(self, word: str) -> bool:
        return word in self.result

    def startsWith(self, prefix: str) -> bool:
        
        return prefix in self.hmap

