Approch 01:

class Solution {
public:
    bool validPalindrome(string s) {
        
        int i = 0, j = s.size()-1, flag = 1;
        
        while (i < j){
            if (s[i] == s[j]){
                i++;j--;
            }else{
                int m = i+1, n = j;
                
                while (m < n){
                    if (s[m] != s[n]) flag = 0;
                    m++;
                    n--;
                }
                if (flag) return true;
                flag = 1;
                m = i;
                n = j-1;
                while (m < n){
                    if (s[m] != s[n]) flag = 0;
                    m++;
                    n--;
                }
                
                if (flag) return true;
                return false;
            }
        }
        
        return true;
    }
};



Approch 02:



class Solution {
public:
    bool isPalindrome(string s, int i, int j){
        while (i < j){
            if (s[i] != s[j]) return false;
            i++;
            j--;
        }
        return true;
    }
    bool validPalindrome(string s) {
        
        int i = 0, j = s.size()-1, flag = 1;
        
        while (i < j){
            if (s[i] == s[j]){
                i++;j--;
            }else{
                if (isPalindrome(s, i+1, j) || isPalindrome(s, i, j-1)) return true;
                return false;
            }
        }
        
        return true;
    }
};