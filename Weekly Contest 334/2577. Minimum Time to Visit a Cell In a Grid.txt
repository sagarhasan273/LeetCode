class Solution:
    def minimumTime(self, grid: List[List[int]]) -> int:
        if grid[0][1] > 1 and grid[1][0] > 1:
            return -1
        
        rows, cols = len(grid), len(grid[0])

        pq = [(grid[0][0], 0, 0)]
        visited = set()

        while pq:
            time, row, col = heappop(pq)

            if row+1 == rows and col+1 == cols:
                return time
            
            if (row, col) in visited:
                continue
            
            visited.add((row, col))

            for dr, dc in [[1, 0], [0, 1], [-1, 0], [0, -1]]:
                r, c = dr+row, dc+col
                if 0 <= r < rows and 0 <= c < cols and (r, c) not in visited:
                    wait = 1 if (grid[r][c]-time) % 2 == 0 else 0
                    heappush(pq, (max(time+1, grid[r][c]+wait), r, c))
        
        return -1
            